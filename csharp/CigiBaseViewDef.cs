//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiBaseViewDef : CigiBasePacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiBaseViewDef(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ccl_dllDPINVOKE.CigiBaseViewDef_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiBaseViewDef obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiBaseViewDef obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccl_dllDPINVOKE.delete_CigiBaseViewDef(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override int Pack(CigiBasePacket Base, SWIGTYPE_p_unsigned___int8 Buff, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_Pack(swigCPtr, CigiBasePacket.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff), SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap, SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int GetCnvt(CigiVersionID CnvtVersion, SWIGTYPE_p_CigiCnvtInfoType__Type CnvtInfo) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_GetCnvt(swigCPtr, CigiVersionID.getCPtr(CnvtVersion), SWIGTYPE_p_CigiCnvtInfoType__Type.getCPtr(CnvtInfo));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetMirrorMode(CigiBaseViewDef.MirrorModeGrp MirrorModeIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetMirrorMode__SWIG_0(swigCPtr, (int)MirrorModeIn, bndchk);
    return ret;
  }

  public int SetMirrorMode(CigiBaseViewDef.MirrorModeGrp MirrorModeIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetMirrorMode__SWIG_1(swigCPtr, (int)MirrorModeIn);
    return ret;
  }

  public CigiBaseViewDef.MirrorModeGrp GetMirrorMode() {
    CigiBaseViewDef.MirrorModeGrp ret = (CigiBaseViewDef.MirrorModeGrp)ccl_dllDPINVOKE.CigiBaseViewDef_GetMirrorMode(swigCPtr);
    return ret;
  }

  public int SetPixelReplicateMode(CigiBaseViewDef.PixelReplicateModeGrp PixelReplicateModeIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetPixelReplicateMode__SWIG_0(swigCPtr, (int)PixelReplicateModeIn, bndchk);
    return ret;
  }

  public int SetPixelReplicateMode(CigiBaseViewDef.PixelReplicateModeGrp PixelReplicateModeIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetPixelReplicateMode__SWIG_1(swigCPtr, (int)PixelReplicateModeIn);
    return ret;
  }

  public CigiBaseViewDef.PixelReplicateModeGrp GetPixelReplicateMode() {
    CigiBaseViewDef.PixelReplicateModeGrp ret = (CigiBaseViewDef.PixelReplicateModeGrp)ccl_dllDPINVOKE.CigiBaseViewDef_GetPixelReplicateMode(swigCPtr);
    return ret;
  }

  public int SetViewType(SWIGTYPE_p_unsigned___int8 ViewTypeIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetViewType__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(ViewTypeIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetViewType(SWIGTYPE_p_unsigned___int8 ViewTypeIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetViewType__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(ViewTypeIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetViewType() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiBaseViewDef_GetViewType(swigCPtr), true);
    return ret;
  }

  public int SetFOVNear(float FOVNearIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVNear__SWIG_0(swigCPtr, FOVNearIn, bndchk);
    return ret;
  }

  public int SetFOVNear(float FOVNearIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVNear__SWIG_1(swigCPtr, FOVNearIn);
    return ret;
  }

  public float GetFOVNear() {
    float ret = ccl_dllDPINVOKE.CigiBaseViewDef_GetFOVNear(swigCPtr);
    return ret;
  }

  public int SetFOVFar(float FOVFarIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVFar__SWIG_0(swigCPtr, FOVFarIn, bndchk);
    return ret;
  }

  public int SetFOVFar(float FOVFarIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVFar__SWIG_1(swigCPtr, FOVFarIn);
    return ret;
  }

  public float GetFOVFar() {
    float ret = ccl_dllDPINVOKE.CigiBaseViewDef_GetFOVFar(swigCPtr);
    return ret;
  }

  public int SetFOVLeft(float FOVLeftIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVLeft__SWIG_0(swigCPtr, FOVLeftIn, bndchk);
    return ret;
  }

  public int SetFOVLeft(float FOVLeftIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVLeft__SWIG_1(swigCPtr, FOVLeftIn);
    return ret;
  }

  public float GetFOVLeft() {
    float ret = ccl_dllDPINVOKE.CigiBaseViewDef_GetFOVLeft(swigCPtr);
    return ret;
  }

  public int SetFOVRight(float FOVRightIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVRight__SWIG_0(swigCPtr, FOVRightIn, bndchk);
    return ret;
  }

  public int SetFOVRight(float FOVRightIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVRight__SWIG_1(swigCPtr, FOVRightIn);
    return ret;
  }

  public float GetFOVRight() {
    float ret = ccl_dllDPINVOKE.CigiBaseViewDef_GetFOVRight(swigCPtr);
    return ret;
  }

  public int SetFOVTop(float FOVTopIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVTop__SWIG_0(swigCPtr, FOVTopIn, bndchk);
    return ret;
  }

  public int SetFOVTop(float FOVTopIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVTop__SWIG_1(swigCPtr, FOVTopIn);
    return ret;
  }

  public float GetFOVTop() {
    float ret = ccl_dllDPINVOKE.CigiBaseViewDef_GetFOVTop(swigCPtr);
    return ret;
  }

  public int SetFOVBottom(float FOVBottomIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVBottom__SWIG_0(swigCPtr, FOVBottomIn, bndchk);
    return ret;
  }

  public int SetFOVBottom(float FOVBottomIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseViewDef_SetFOVBottom__SWIG_1(swigCPtr, FOVBottomIn);
    return ret;
  }

  public float GetFOVBottom() {
    float ret = ccl_dllDPINVOKE.CigiBaseViewDef_GetFOVBottom(swigCPtr);
    return ret;
  }

  public enum MirrorModeGrp {
    MirrorNone = 0,
    Horizontal = 1,
    Vertical = 2,
    Horiz_Vert = 3
  }

  public enum PixelReplicateModeGrp {
    ReplicateNone = 0,
    Replicate1x2 = 1,
    Replicate2x1 = 2,
    Replicate2x2 = 3,
    ReplicateDefA = 4,
    ReplicateDefB = 5,
    ReplicateDefC = 6,
    ReplicateDefD = 7
  }

  public enum ProjectionTypeGrp {
    Perspective = 0,
    Orthographic = 1
  }

}

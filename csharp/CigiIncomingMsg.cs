//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiIncomingMsg : CigiMessage {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiIncomingMsg(global::System.IntPtr cPtr, bool cMemoryOwn) : base(example_modulePINVOKE.CigiIncomingMsg_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiIncomingMsg obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiIncomingMsg obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          example_modulePINVOKE.delete_CigiIncomingMsg(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CigiIncomingMsg() : this(example_modulePINVOKE.new_CigiIncomingMsg(), true) {
  }

  public int ProcessIncomingMsg(SWIGTYPE_p_unsigned___int8 Buff, int Size) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_ProcessIncomingMsg__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Size);
    return ret;
  }

  public int ProcessIncomingMsg() {
    int ret = example_modulePINVOKE.CigiIncomingMsg_ProcessIncomingMsg__SWIG_1(swigCPtr);
    return ret;
  }

  public void ProcessPacket(int PcktId, CigiBasePacket Pckt) {
    example_modulePINVOKE.CigiIncomingMsg_ProcessPacket(swigCPtr, PcktId, CigiBasePacket.getCPtr(Pckt));
  }

  public CigiBasePacket GetFirstPacket() {
    global::System.IntPtr cPtr = example_modulePINVOKE.CigiIncomingMsg_GetFirstPacket(swigCPtr);
    CigiBasePacket ret = (cPtr == global::System.IntPtr.Zero) ? null : new CigiBasePacket(cPtr, false);
    return ret;
  }

  public CigiBasePacket GetNextPacket() {
    global::System.IntPtr cPtr = example_modulePINVOKE.CigiIncomingMsg_GetNextPacket(swigCPtr);
    CigiBasePacket ret = (cPtr == global::System.IntPtr.Zero) ? null : new CigiBasePacket(cPtr, false);
    return ret;
  }

  public int RegisterEventProcessor(int PacketID, CigiBaseEventProcessor EventMgr) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_RegisterEventProcessor(swigCPtr, PacketID, CigiBaseEventProcessor.getCPtr(EventMgr));
    return ret;
  }

  public int UnregisterEventProcessor(int PacketID, CigiBaseEventProcessor EventMgr) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_UnregisterEventProcessor(swigCPtr, PacketID, CigiBaseEventProcessor.getCPtr(EventMgr));
    return ret;
  }

  public int RegisterCallBack(int PacketID, SWIGTYPE_p_f_p_CigiBasePacket__void CallBack) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_RegisterCallBack(swigCPtr, PacketID, SWIGTYPE_p_f_p_CigiBasePacket__void.getCPtr(CallBack));
    return ret;
  }

  public int UnregisterCallBack(int PacketID, SWIGTYPE_p_f_p_CigiBasePacket__void CallBack) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_UnregisterCallBack(swigCPtr, PacketID, SWIGTYPE_p_f_p_CigiBasePacket__void.getCPtr(CallBack));
    return ret;
  }

  public int RegisterSignalProcessor(CigiBaseSignalProcessing SignalMgr) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_RegisterSignalProcessor(swigCPtr, CigiBaseSignalProcessing.getCPtr(SignalMgr));
    return ret;
  }

  public int UnregisterSignalProcessor(CigiBaseSignalProcessing SignalMgr) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_UnregisterSignalProcessor(swigCPtr, CigiBaseSignalProcessing.getCPtr(SignalMgr));
    return ret;
  }

  public int RegisterUnrecognizedPacketEvent(CigiBaseEventProcessor EventMgr) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_RegisterUnrecognizedPacketEvent(swigCPtr, CigiBaseEventProcessor.getCPtr(EventMgr));
    return ret;
  }

  public int UnregisterUnrecognizedPacketEvent(CigiBaseEventProcessor EventMgr) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_UnregisterUnrecognizedPacketEvent(swigCPtr, CigiBaseEventProcessor.getCPtr(EventMgr));
    return ret;
  }

  public int RegisterUnrecognizedPacketCallBack(SWIGTYPE_p_f_p_CigiBasePacket__void CallBack) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_RegisterUnrecognizedPacketCallBack(swigCPtr, SWIGTYPE_p_f_p_CigiBasePacket__void.getCPtr(CallBack));
    return ret;
  }

  public int UnregisterUnrecognizedPacketCallBack(SWIGTYPE_p_f_p_CigiBasePacket__void CallBack) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_UnregisterUnrecognizedPacketCallBack(swigCPtr, SWIGTYPE_p_f_p_CigiBasePacket__void.getCPtr(CallBack));
    return ret;
  }

  public int RegisterUnhandledPacketEvent(CigiBaseEventProcessor EventMgr) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_RegisterUnhandledPacketEvent(swigCPtr, CigiBaseEventProcessor.getCPtr(EventMgr));
    return ret;
  }

  public int UnregisterUnhandledPacketEvent(CigiBaseEventProcessor EventMgr) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_UnregisterUnhandledPacketEvent(swigCPtr, CigiBaseEventProcessor.getCPtr(EventMgr));
    return ret;
  }

  public int RegisterUnhandledPacketCallBack(SWIGTYPE_p_f_p_CigiBasePacket__void CallBack) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_RegisterUnhandledPacketCallBack(swigCPtr, SWIGTYPE_p_f_p_CigiBasePacket__void.getCPtr(CallBack));
    return ret;
  }

  public int UnregisterUnhandledPacketCallBack(SWIGTYPE_p_f_p_CigiBasePacket__void CallBack) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_UnregisterUnhandledPacketCallBack(swigCPtr, SWIGTYPE_p_f_p_CigiBasePacket__void.getCPtr(CallBack));
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetNextBuffToLoad() {
    global::System.IntPtr cPtr = example_modulePINVOKE.CigiIncomingMsg_GetNextBuffToLoad(swigCPtr);
    SWIGTYPE_p_unsigned___int8 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned___int8(cPtr, false);
    return ret;
  }

  public void AdvanceCrntBuffer() {
    example_modulePINVOKE.CigiIncomingMsg_AdvanceCrntBuffer(swigCPtr);
  }

  public void SetCrntMsgSize(int MsgSize) {
    example_modulePINVOKE.CigiIncomingMsg_SetCrntMsgSize(swigCPtr, MsgSize);
  }

  public SWIGTYPE_p_unsigned___int8 GetMsgBuffer() {
    global::System.IntPtr cPtr = example_modulePINVOKE.CigiIncomingMsg_GetMsgBuffer(swigCPtr);
    SWIGTYPE_p_unsigned___int8 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned___int8(cPtr, false);
    return ret;
  }

  public int GetMsgBufSize() {
    int ret = example_modulePINVOKE.CigiIncomingMsg_GetMsgBufSize(swigCPtr);
    return ret;
  }

  public void UsingIteration(bool IterationIn) {
    example_modulePINVOKE.CigiIncomingMsg_UsingIteration__SWIG_0(swigCPtr, IterationIn);
  }

  public void UsingIteration() {
    example_modulePINVOKE.CigiIncomingMsg_UsingIteration__SWIG_1(swigCPtr);
  }

  public bool CheckIteration() {
    bool ret = example_modulePINVOKE.CigiIncomingMsg_CheckIteration(swigCPtr);
    return ret;
  }

  public void SetReaderVersion(CigiVersionID Version) {
    example_modulePINVOKE.CigiIncomingMsg_SetReaderVersion(swigCPtr, CigiVersionID.getCPtr(Version));
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
  }

  public int SetReaderCigiVersion(int CigiVersionIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_SetReaderCigiVersion__SWIG_0(swigCPtr, CigiVersionIn, bndchk);
    return ret;
  }

  public int SetReaderCigiVersion(int CigiVersionIn) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_SetReaderCigiVersion__SWIG_1(swigCPtr, CigiVersionIn);
    return ret;
  }

  public int SetReaderCigiVersion(int CigiVersionIn, int CigiMinorVersionIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_SetReaderCigiVersion__SWIG_2(swigCPtr, CigiVersionIn, CigiMinorVersionIn, bndchk);
    return ret;
  }

  public int SetReaderCigiVersion(int CigiVersionIn, int CigiMinorVersionIn) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_SetReaderCigiVersion__SWIG_3(swigCPtr, CigiVersionIn, CigiMinorVersionIn);
    return ret;
  }

  public int GetReaderCigiVersion() {
    int ret = example_modulePINVOKE.CigiIncomingMsg_GetReaderCigiVersion(swigCPtr);
    return ret;
  }

  public int GetReaderCigiMinorVersion() {
    int ret = example_modulePINVOKE.CigiIncomingMsg_GetReaderCigiMinorVersion(swigCPtr);
    return ret;
  }

  public int GetIncomingCigiMajorVersion() {
    int ret = example_modulePINVOKE.CigiIncomingMsg_GetIncomingCigiMajorVersion(swigCPtr);
    return ret;
  }

  public int GetIncomingCigiMinorVersion() {
    int ret = example_modulePINVOKE.CigiIncomingMsg_GetIncomingCigiMinorVersion(swigCPtr);
    return ret;
  }

  public override int RegisterUserPacket(CigiBasePacket Packet, SWIGTYPE_p_unsigned___int16 PacketID, bool HostSend, bool IGSend) {
    int ret = example_modulePINVOKE.CigiIncomingMsg_RegisterUserPacket(swigCPtr, CigiBasePacket.getCPtr(Packet), SWIGTYPE_p_unsigned___int16.getCPtr(PacketID), HostSend, IGSend);
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

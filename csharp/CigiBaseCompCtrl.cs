//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiBaseCompCtrl : CigiBasePacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiBaseCompCtrl(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ccl_dllDPINVOKE.CigiBaseCompCtrl_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiBaseCompCtrl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiBaseCompCtrl obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccl_dllDPINVOKE.delete_CigiBaseCompCtrl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override int Pack(CigiBasePacket Base, SWIGTYPE_p_unsigned___int8 Buff, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBaseCompCtrl_Pack(swigCPtr, CigiBasePacket.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff), SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBaseCompCtrl_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap, SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int GetCnvt(CigiVersionID CnvtVersion, SWIGTYPE_p_CigiCnvtInfoType__Type CnvtInfo) {
    int ret = ccl_dllDPINVOKE.CigiBaseCompCtrl_GetCnvt(swigCPtr, CigiVersionID.getCPtr(CnvtVersion), SWIGTYPE_p_CigiCnvtInfoType__Type.getCPtr(CnvtInfo));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetCompID(SWIGTYPE_p_unsigned___int16 CompIDIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseCompCtrl_SetCompID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(CompIDIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetCompID(SWIGTYPE_p_unsigned___int16 CompIDIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseCompCtrl_SetCompID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(CompIDIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int16 GetCompID() {
    SWIGTYPE_p_unsigned___int16 ret = new SWIGTYPE_p_unsigned___int16(ccl_dllDPINVOKE.CigiBaseCompCtrl_GetCompID(swigCPtr), true);
    return ret;
  }

  public enum CompAssocGrp {
    NoCnvtV1 = -1,
    Entity = 0,
    Environment = 1,
    View = 2
  }

  public enum CompClassV2Grp {
    NoCnvtV2 = -1,
    EntityV2 = 0,
    EnvironmentV2 = 1,
    ViewV2 = 2,
    ViewGrpV2 = 3,
    SensorV2 = 4,
    SystemV2 = 5
  }

  public enum CompClassV3Grp {
    NoCnvtV3 = -1,
    EntityV3 = 0,
    ViewV3 = 1,
    ViewGrpV3 = 2,
    SensorV3 = 3,
    RegionalSeaSurfaceV3 = 4,
    RegionalTerrainSurfaceV3 = 5,
    RegionalLayeredWeatherV3 = 6,
    GlobalSeaSurfaceV3 = 7,
    GlobalTerrainSurfaceV3 = 8,
    GlobalLayeredWeatherV3 = 9,
    AtmosphereV3 = 10,
    CelestialSphereV3 = 11,
    EventV3 = 12,
    SystemV3 = 13,
    SymbolSurfaceV3_3 = 14,
    SymbolV3_3 = 15
  }

  public enum CompClassV4Grp {
    NoCnvtV4 = -1,
    EntityV4 = 0,
    ViewV4 = 1,
    ViewGrpV4 = 2,
    SensorV4 = 3,
    RegionalSeaSurfaceV4 = 4,
    RegionalTerrainSurfaceV4 = 5,
    RegionalLayeredWeatherV4 = 6,
    GlobalSeaSurfaceV4 = 7,
    GlobalTerrainSurfaceV4 = 8,
    GlobalLayeredWeatherV4 = 9,
    AtmosphereV4 = 10,
    CelestialSphereV4 = 11,
    EventV4 = 12,
    SystemV4 = 13,
    SymbolSurfaceV4 = 14,
    SymbolV4 = 15
  }

  public enum BytePos {
    MSB = 3,
    Ord2 = 2,
    Ord3 = 1,
    LSB = 0
  }

  public enum HalfWordPos {
    MSHW = 1,
    LSHW = 0
  }

}

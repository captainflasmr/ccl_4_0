//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiMessageBuffer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CigiMessageBuffer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiMessageBuffer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiMessageBuffer obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CigiMessageBuffer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccl_dllDPINVOKE.delete_CigiMessageBuffer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CigiMessageBuffer(int BufLen) : this(ccl_dllDPINVOKE.new_CigiMessageBuffer__SWIG_0(BufLen), true) {
  }

  public CigiMessageBuffer() : this(ccl_dllDPINVOKE.new_CigiMessageBuffer__SWIG_1(), true) {
  }

  public CigiVersionID GetCigiVersion() {
    CigiVersionID ret = new CigiVersionID(ccl_dllDPINVOKE.CigiMessageBuffer_GetCigiVersion(swigCPtr), true);
    return ret;
  }

  public int GetCigiMajorVersion() {
    int ret = ccl_dllDPINVOKE.CigiMessageBuffer_GetCigiMajorVersion(swigCPtr);
    return ret;
  }

  public int GetCigiMinorVersion() {
    int ret = ccl_dllDPINVOKE.CigiMessageBuffer_GetCigiMinorVersion(swigCPtr);
    return ret;
  }

  public int GetBufferSize() {
    int ret = ccl_dllDPINVOKE.CigiMessageBuffer_GetBufferSize(swigCPtr);
    return ret;
  }

  public bool IsActive() {
    bool ret = ccl_dllDPINVOKE.CigiMessageBuffer_IsActive(swigCPtr);
    return ret;
  }

  public bool IsLocked() {
    bool ret = ccl_dllDPINVOKE.CigiMessageBuffer_IsLocked(swigCPtr);
    return ret;
  }

  public bool IsValidIGCtrlSOF() {
    bool ret = ccl_dllDPINVOKE.CigiMessageBuffer_IsValidIGCtrlSOF(swigCPtr);
    return ret;
  }

  public bool IsDataPresent() {
    bool ret = ccl_dllDPINVOKE.CigiMessageBuffer_IsDataPresent(swigCPtr);
    return ret;
  }

}

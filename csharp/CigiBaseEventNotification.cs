//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiBaseEventNotification : CigiBasePacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiBaseEventNotification(global::System.IntPtr cPtr, bool cMemoryOwn) : base(example_modulePINVOKE.CigiBaseEventNotification_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiBaseEventNotification obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiBaseEventNotification obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          example_modulePINVOKE.delete_CigiBaseEventNotification(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override int Pack(CigiBasePacket Base, SWIGTYPE_p_unsigned___int8 Buff, SWIGTYPE_p_void Spec) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_Pack(swigCPtr, CigiBasePacket.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff), SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap, SWIGTYPE_p_void Spec) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap, SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int GetCnvt(CigiVersionID CnvtVersion, SWIGTYPE_p_CigiCnvtInfoType__Type CnvtInfo) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_GetCnvt(swigCPtr, CigiVersionID.getCPtr(CnvtVersion), SWIGTYPE_p_CigiCnvtInfoType__Type.getCPtr(CnvtInfo));
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEventID(SWIGTYPE_p_unsigned___int16 EventIDIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_SetEventID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(EventIDIn), bndchk);
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEventID(SWIGTYPE_p_unsigned___int16 EventIDIn) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_SetEventID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(EventIDIn));
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int16 GetEventID() {
    SWIGTYPE_p_unsigned___int16 ret = new SWIGTYPE_p_unsigned___int16(example_modulePINVOKE.CigiBaseEventNotification_GetEventID(swigCPtr), true);
    return ret;
  }

  public int SetEventData(SWIGTYPE_p_unsigned___int32 EventDataIn, int ndx, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_SetEventData__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int32.getCPtr(EventDataIn), ndx, bndchk);
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEventData(SWIGTYPE_p_unsigned___int32 EventDataIn, int ndx) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_SetEventData__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int32.getCPtr(EventDataIn), ndx);
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEventData(SWIGTYPE_p___int32 EventDataIn, int ndx, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_SetEventData__SWIG_2(swigCPtr, SWIGTYPE_p___int32.getCPtr(EventDataIn), ndx, bndchk);
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEventData(SWIGTYPE_p___int32 EventDataIn, int ndx) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_SetEventData__SWIG_3(swigCPtr, SWIGTYPE_p___int32.getCPtr(EventDataIn), ndx);
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEventData(float EventDataIn, int ndx, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_SetEventData__SWIG_4(swigCPtr, EventDataIn, ndx, bndchk);
    return ret;
  }

  public int SetEventData(float EventDataIn, int ndx) {
    int ret = example_modulePINVOKE.CigiBaseEventNotification_SetEventData__SWIG_5(swigCPtr, EventDataIn, ndx);
    return ret;
  }

  public SWIGTYPE_p_unsigned___int32 GetULEventData(int ndx) {
    SWIGTYPE_p_unsigned___int32 ret = new SWIGTYPE_p_unsigned___int32(example_modulePINVOKE.CigiBaseEventNotification_GetULEventData(swigCPtr, ndx), true);
    return ret;
  }

  public SWIGTYPE_p___int32 GetLEventData(int ndx) {
    SWIGTYPE_p___int32 ret = new SWIGTYPE_p___int32(example_modulePINVOKE.CigiBaseEventNotification_GetLEventData(swigCPtr, ndx), true);
    return ret;
  }

  public float GetFEventData(int ndx) {
    float ret = example_modulePINVOKE.CigiBaseEventNotification_GetFEventData(swigCPtr, ndx);
    return ret;
  }

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiMessage : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CigiMessage(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiMessage obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiMessage obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CigiMessage() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          example_modulePINVOKE.delete_CigiMessage(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool GetValidIGCtrlSOF() {
    bool ret = example_modulePINVOKE.CigiMessage_GetValidIGCtrlSOF(swigCPtr);
    return ret;
  }

  public int CreateBuffer(int NumBuf, int BufLen) {
    int ret = example_modulePINVOKE.CigiMessage_CreateBuffer__SWIG_0(swigCPtr, NumBuf, BufLen);
    return ret;
  }

  public int CreateBuffer(int NumBuf) {
    int ret = example_modulePINVOKE.CigiMessage_CreateBuffer__SWIG_1(swigCPtr, NumBuf);
    return ret;
  }

  public int CreateBuffer() {
    int ret = example_modulePINVOKE.CigiMessage_CreateBuffer__SWIG_2(swigCPtr);
    return ret;
  }

  public void SetVersionChangeCallback(SWIGTYPE_p_f_int_int_p_void__void cb, SWIGTYPE_p_void user) {
    example_modulePINVOKE.CigiMessage_SetVersionChangeCallback(swigCPtr, SWIGTYPE_p_f_int_int_p_void__void.getCPtr(cb), SWIGTYPE_p_void.getCPtr(user));
  }

  public SWIGTYPE_p_f_int_int_p_void__void VersionChangeCallback() {
    global::System.IntPtr cPtr = example_modulePINVOKE.CigiMessage_VersionChangeCallback(swigCPtr);
    SWIGTYPE_p_f_int_int_p_void__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_int_int_p_void__void(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void VersionChangeCallbackUser() {
    global::System.IntPtr cPtr = example_modulePINVOKE.CigiMessage_VersionChangeCallbackUser(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public virtual int RegisterUserPacket(CigiBasePacket Packet, SWIGTYPE_p_unsigned___int16 PacketID, bool HostSend, bool IGSend) {
    int ret = example_modulePINVOKE.CigiMessage_RegisterUserPacket(swigCPtr, CigiBasePacket.getCPtr(Packet), SWIGTYPE_p_unsigned___int16.getCPtr(PacketID), HostSend, IGSend);
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiViewDefV2 : CigiBaseViewDef {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiViewDefV2(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ccl_dllDPINVOKE.CigiViewDefV2_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiViewDefV2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiViewDefV2 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccl_dllDPINVOKE.delete_CigiViewDefV2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CigiViewDefV2() : this(ccl_dllDPINVOKE.new_CigiViewDefV2(), true) {
  }

  public override int Pack(CigiBasePacket Base, SWIGTYPE_p_unsigned___int8 Buff, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_Pack(swigCPtr, CigiBasePacket.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff), SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap, SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public int SetViewID(SWIGTYPE_p_unsigned___int8 ViewIDIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetViewID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(ViewIDIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetViewID(SWIGTYPE_p_unsigned___int8 ViewIDIn) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetViewID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(ViewIDIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetViewID() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiViewDefV2_GetViewID(swigCPtr), true);
    return ret;
  }

  public int SetGroupID(SWIGTYPE_p_unsigned___int8 GroupIDIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetGroupID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(GroupIDIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetGroupID(SWIGTYPE_p_unsigned___int8 GroupIDIn) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetGroupID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(GroupIDIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetGroupID() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiViewDefV2_GetGroupID(swigCPtr), true);
    return ret;
  }

  public int SetFOVNearEn(bool FOVNearEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVNearEn__SWIG_0(swigCPtr, FOVNearEnIn, bndchk);
    return ret;
  }

  public int SetFOVNearEn(bool FOVNearEnIn) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVNearEn__SWIG_1(swigCPtr, FOVNearEnIn);
    return ret;
  }

  public bool GetFOVNearEn() {
    bool ret = ccl_dllDPINVOKE.CigiViewDefV2_GetFOVNearEn(swigCPtr);
    return ret;
  }

  public int SetFOVFarEn(bool FOVFarEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVFarEn__SWIG_0(swigCPtr, FOVFarEnIn, bndchk);
    return ret;
  }

  public int SetFOVFarEn(bool FOVFarEnIn) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVFarEn__SWIG_1(swigCPtr, FOVFarEnIn);
    return ret;
  }

  public bool GetFOVFarEn() {
    bool ret = ccl_dllDPINVOKE.CigiViewDefV2_GetFOVFarEn(swigCPtr);
    return ret;
  }

  public int SetFOVLeftEn(bool FOVLeftEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVLeftEn__SWIG_0(swigCPtr, FOVLeftEnIn, bndchk);
    return ret;
  }

  public int SetFOVLeftEn(bool FOVLeftEnIn) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVLeftEn__SWIG_1(swigCPtr, FOVLeftEnIn);
    return ret;
  }

  public bool GetFOVLeftEn() {
    bool ret = ccl_dllDPINVOKE.CigiViewDefV2_GetFOVLeftEn(swigCPtr);
    return ret;
  }

  public int SetFOVRightEn(bool FOVRightEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVRightEn__SWIG_0(swigCPtr, FOVRightEnIn, bndchk);
    return ret;
  }

  public int SetFOVRightEn(bool FOVRightEnIn) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVRightEn__SWIG_1(swigCPtr, FOVRightEnIn);
    return ret;
  }

  public bool GetFOVRightEn() {
    bool ret = ccl_dllDPINVOKE.CigiViewDefV2_GetFOVRightEn(swigCPtr);
    return ret;
  }

  public int SetFOVTopEn(bool FOVTopEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVTopEn__SWIG_0(swigCPtr, FOVTopEnIn, bndchk);
    return ret;
  }

  public int SetFOVTopEn(bool FOVTopEnIn) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVTopEn__SWIG_1(swigCPtr, FOVTopEnIn);
    return ret;
  }

  public bool GetFOVTopEn() {
    bool ret = ccl_dllDPINVOKE.CigiViewDefV2_GetFOVTopEn(swigCPtr);
    return ret;
  }

  public int SetFOVBottomEn(bool FOVBottomEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVBottomEn__SWIG_0(swigCPtr, FOVBottomEnIn, bndchk);
    return ret;
  }

  public int SetFOVBottomEn(bool FOVBottomEnIn) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetFOVBottomEn__SWIG_1(swigCPtr, FOVBottomEnIn);
    return ret;
  }

  public bool GetFOVBottomEn() {
    bool ret = ccl_dllDPINVOKE.CigiViewDefV2_GetFOVBottomEn(swigCPtr);
    return ret;
  }

  public int SetTrackerAssigned(bool TrackerAssignedIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetTrackerAssigned__SWIG_0(swigCPtr, TrackerAssignedIn, bndchk);
    return ret;
  }

  public int SetTrackerAssigned(bool TrackerAssignedIn) {
    int ret = ccl_dllDPINVOKE.CigiViewDefV2_SetTrackerAssigned__SWIG_1(swigCPtr, TrackerAssignedIn);
    return ret;
  }

  public bool GetTrackerAssigned() {
    bool ret = ccl_dllDPINVOKE.CigiViewDefV2_GetTrackerAssigned(swigCPtr);
    return ret;
  }

}

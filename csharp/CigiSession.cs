//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiSession : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CigiSession(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiSession obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiSession obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CigiSession() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccl_dllDPINVOKE.delete_CigiSession(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int SetCigiVersion(int CigiVersionIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiSession_SetCigiVersion__SWIG_0(swigCPtr, CigiVersionIn, bndchk);
    return ret;
  }

  public int SetCigiVersion(int CigiVersionIn) {
    int ret = ccl_dllDPINVOKE.CigiSession_SetCigiVersion__SWIG_1(swigCPtr, CigiVersionIn);
    return ret;
  }

  public int SetCigiVersion(int CigiVersionIn, int CigiMinorVersionIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiSession_SetCigiVersion__SWIG_2(swigCPtr, CigiVersionIn, CigiMinorVersionIn, bndchk);
    return ret;
  }

  public int SetCigiVersion(int CigiVersionIn, int CigiMinorVersionIn) {
    int ret = ccl_dllDPINVOKE.CigiSession_SetCigiVersion__SWIG_3(swigCPtr, CigiVersionIn, CigiMinorVersionIn);
    return ret;
  }

  public int SetCigiVersion(CigiVersionID CigiVersionIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiSession_SetCigiVersion__SWIG_4(swigCPtr, CigiVersionID.getCPtr(CigiVersionIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetCigiVersion(CigiVersionID CigiVersionIn) {
    int ret = ccl_dllDPINVOKE.CigiSession_SetCigiVersion__SWIG_5(swigCPtr, CigiVersionID.getCPtr(CigiVersionIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMostMatureReceivedCigiVersion(CigiVersionID Version) {
    ccl_dllDPINVOKE.CigiSession_SetMostMatureReceivedCigiVersion(swigCPtr, CigiVersionID.getCPtr(Version));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
  }

  public CigiVersionID GetCompleteCigiVersion() {
    CigiVersionID ret = new CigiVersionID(ccl_dllDPINVOKE.CigiSession_GetCompleteCigiVersion(swigCPtr), true);
    return ret;
  }

  public int GetCigiVersion() {
    int ret = ccl_dllDPINVOKE.CigiSession_GetCigiVersion(swigCPtr);
    return ret;
  }

  public int GetCigiMinorVersion() {
    int ret = ccl_dllDPINVOKE.CigiSession_GetCigiMinorVersion(swigCPtr);
    return ret;
  }

  public CigiOutgoingMsg GetOutgoingMsgMgr() {
    CigiOutgoingMsg ret = new CigiOutgoingMsg(ccl_dllDPINVOKE.CigiSession_GetOutgoingMsgMgr(swigCPtr), false);
    return ret;
  }

  public CigiIncomingMsg GetIncomingMsgMgr() {
    CigiIncomingMsg ret = new CigiIncomingMsg(ccl_dllDPINVOKE.CigiSession_GetIncomingMsgMgr(swigCPtr), false);
    return ret;
  }

  public CigiAnimationTable GetAnimationTableMgr() {
    CigiAnimationTable ret = new CigiAnimationTable(ccl_dllDPINVOKE.CigiSession_GetAnimationTableMgr(swigCPtr), false);
    return ret;
  }

  public void SetSynchronous(bool Sync) {
    ccl_dllDPINVOKE.CigiSession_SetSynchronous(swigCPtr, Sync);
  }

  public bool IsSynchronous() {
    bool ret = ccl_dllDPINVOKE.CigiSession_IsSynchronous(swigCPtr);
    return ret;
  }

  public int RegisterUserPacket(CigiBasePacket Packet, SWIGTYPE_p_unsigned___int16 PacketID, bool HostSend, bool IGSend) {
    int ret = ccl_dllDPINVOKE.CigiSession_RegisterUserPacket(swigCPtr, CigiBasePacket.getCPtr(Packet), SWIGTYPE_p_unsigned___int16.getCPtr(PacketID), HostSend, IGSend);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsHost() {
    bool ret = ccl_dllDPINVOKE.CigiSession_IsHost(swigCPtr);
    return ret;
  }

  public bool IsIG() {
    bool ret = ccl_dllDPINVOKE.CigiSession_IsIG(swigCPtr);
    return ret;
  }

  public CigiSession.SessionTypeEnum SessionType {
    set {
      ccl_dllDPINVOKE.CigiSession_SessionType_set(swigCPtr, (int)value);
    } 
    get {
      CigiSession.SessionTypeEnum ret = (CigiSession.SessionTypeEnum)ccl_dllDPINVOKE.CigiSession_SessionType_get(swigCPtr);
      return ret;
    } 
  }

  public enum SessionTypeEnum {
    Host,
    IG
  }

}

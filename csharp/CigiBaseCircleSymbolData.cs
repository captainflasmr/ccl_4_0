//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiBaseCircleSymbolData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CigiBaseCircleSymbolData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiBaseCircleSymbolData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiBaseCircleSymbolData obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CigiBaseCircleSymbolData() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          example_modulePINVOKE.delete_CigiBaseCircleSymbolData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual int Pack(CigiBaseCircleSymbolData Base, SWIGTYPE_p_unsigned___int8 Buff) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_Pack(swigCPtr, CigiBaseCircleSymbolData.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff));
    return ret;
  }

  public virtual int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap);
    return ret;
  }

  public int SetCenterUPosition(float CenterUPositionIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetCenterUPosition__SWIG_0(swigCPtr, CenterUPositionIn, bndchk);
    return ret;
  }

  public int SetCenterUPosition(float CenterUPositionIn) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetCenterUPosition__SWIG_1(swigCPtr, CenterUPositionIn);
    return ret;
  }

  public float GetCenterUPosition() {
    float ret = example_modulePINVOKE.CigiBaseCircleSymbolData_GetCenterUPosition(swigCPtr);
    return ret;
  }

  public int SetCenterVPosition(float CenterVPositionIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetCenterVPosition__SWIG_0(swigCPtr, CenterVPositionIn, bndchk);
    return ret;
  }

  public int SetCenterVPosition(float CenterVPositionIn) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetCenterVPosition__SWIG_1(swigCPtr, CenterVPositionIn);
    return ret;
  }

  public float GetCenterVPosition() {
    float ret = example_modulePINVOKE.CigiBaseCircleSymbolData_GetCenterVPosition(swigCPtr);
    return ret;
  }

  public int SetRadius(float RadiusIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetRadius__SWIG_0(swigCPtr, RadiusIn, bndchk);
    return ret;
  }

  public int SetRadius(float RadiusIn) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetRadius__SWIG_1(swigCPtr, RadiusIn);
    return ret;
  }

  public float GetRadius() {
    float ret = example_modulePINVOKE.CigiBaseCircleSymbolData_GetRadius(swigCPtr);
    return ret;
  }

  public int SetInnerRadius(float InnerRadiusIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetInnerRadius__SWIG_0(swigCPtr, InnerRadiusIn, bndchk);
    return ret;
  }

  public int SetInnerRadius(float InnerRadiusIn) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetInnerRadius__SWIG_1(swigCPtr, InnerRadiusIn);
    return ret;
  }

  public float GetInnerRadius() {
    float ret = example_modulePINVOKE.CigiBaseCircleSymbolData_GetInnerRadius(swigCPtr);
    return ret;
  }

  public int SetStartAngle(float StartAngleIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetStartAngle__SWIG_0(swigCPtr, StartAngleIn, bndchk);
    return ret;
  }

  public int SetStartAngle(float StartAngleIn) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetStartAngle__SWIG_1(swigCPtr, StartAngleIn);
    return ret;
  }

  public float GetStartAngle() {
    float ret = example_modulePINVOKE.CigiBaseCircleSymbolData_GetStartAngle(swigCPtr);
    return ret;
  }

  public int SetEndAngle(float EndAngleIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetEndAngle__SWIG_0(swigCPtr, EndAngleIn, bndchk);
    return ret;
  }

  public int SetEndAngle(float EndAngleIn) {
    int ret = example_modulePINVOKE.CigiBaseCircleSymbolData_SetEndAngle__SWIG_1(swigCPtr, EndAngleIn);
    return ret;
  }

  public float GetEndAngle() {
    float ret = example_modulePINVOKE.CigiBaseCircleSymbolData_GetEndAngle(swigCPtr);
    return ret;
  }

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PackPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PackPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PackPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PackPointer obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PackPointer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          example_modulePINVOKE.delete_PackPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_unsigned___int8 c {
    set {
      example_modulePINVOKE.PackPointer_c_set(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = example_modulePINVOKE.PackPointer_c_get(swigCPtr);
      SWIGTYPE_p_unsigned___int8 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned___int8(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p___int8 b {
    set {
      example_modulePINVOKE.PackPointer_b_set(swigCPtr, SWIGTYPE_p___int8.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = example_modulePINVOKE.PackPointer_b_get(swigCPtr);
      SWIGTYPE_p___int8 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p___int8(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned___int16 s {
    set {
      example_modulePINVOKE.PackPointer_s_set(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = example_modulePINVOKE.PackPointer_s_get(swigCPtr);
      SWIGTYPE_p_unsigned___int16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned___int16(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p___int16 h {
    set {
      example_modulePINVOKE.PackPointer_h_set(swigCPtr, SWIGTYPE_p___int16.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = example_modulePINVOKE.PackPointer_h_get(swigCPtr);
      SWIGTYPE_p___int16 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p___int16(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned___int32 l {
    set {
      example_modulePINVOKE.PackPointer_l_set(swigCPtr, SWIGTYPE_p_unsigned___int32.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = example_modulePINVOKE.PackPointer_l_get(swigCPtr);
      SWIGTYPE_p_unsigned___int32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned___int32(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float f {
    set {
      example_modulePINVOKE.PackPointer_f_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = example_modulePINVOKE.PackPointer_f_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_double d {
    set {
      example_modulePINVOKE.PackPointer_d_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = example_modulePINVOKE.PackPointer_d_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public PackPointer() : this(example_modulePINVOKE.new_PackPointer(), true) {
  }

}

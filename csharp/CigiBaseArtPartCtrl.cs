//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiBaseArtPartCtrl : CigiBasePacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiBaseArtPartCtrl(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiBaseArtPartCtrl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiBaseArtPartCtrl obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccl_dllDPINVOKE.delete_CigiBaseArtPartCtrl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override int Pack(CigiBasePacket Base, SWIGTYPE_p_unsigned___int8 Buff, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_Pack(swigCPtr, CigiBasePacket.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff), SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap, SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int GetCnvt(CigiVersionID CnvtVersion, SWIGTYPE_p_CigiCnvtInfoType__Type CnvtInfo) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetCnvt(swigCPtr, CigiVersionID.getCPtr(CnvtVersion), SWIGTYPE_p_CigiCnvtInfoType__Type.getCPtr(CnvtInfo));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEntityID(SWIGTYPE_p_unsigned___int16 EntityIDIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetEntityID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(EntityIDIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEntityID(SWIGTYPE_p_unsigned___int16 EntityIDIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetEntityID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(EntityIDIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int16 GetEntityID() {
    SWIGTYPE_p_unsigned___int16 ret = new SWIGTYPE_p_unsigned___int16(ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetEntityID(swigCPtr), true);
    return ret;
  }

  public int SetArtPartEn(bool ArtPartEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetArtPartEn__SWIG_0(swigCPtr, ArtPartEnIn, bndchk);
    return ret;
  }

  public int SetArtPartEn(bool ArtPartEnIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetArtPartEn__SWIG_1(swigCPtr, ArtPartEnIn);
    return ret;
  }

  public bool GetArtPartEn() {
    bool ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetArtPartEn(swigCPtr);
    return ret;
  }

  public int SetXOffEn(bool XOffEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetXOffEn__SWIG_0(swigCPtr, XOffEnIn, bndchk);
    return ret;
  }

  public int SetXOffEn(bool XOffEnIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetXOffEn__SWIG_1(swigCPtr, XOffEnIn);
    return ret;
  }

  public bool GetXOffEn() {
    bool ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetXOffEn(swigCPtr);
    return ret;
  }

  public int SetYOffEn(bool YOffEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetYOffEn__SWIG_0(swigCPtr, YOffEnIn, bndchk);
    return ret;
  }

  public int SetYOffEn(bool YOffEnIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetYOffEn__SWIG_1(swigCPtr, YOffEnIn);
    return ret;
  }

  public bool GetYOffEn() {
    bool ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetYOffEn(swigCPtr);
    return ret;
  }

  public int SetZOffEn(bool ZOffEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetZOffEn__SWIG_0(swigCPtr, ZOffEnIn, bndchk);
    return ret;
  }

  public int SetZOffEn(bool ZOffEnIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetZOffEn__SWIG_1(swigCPtr, ZOffEnIn);
    return ret;
  }

  public bool GetZOffEn() {
    bool ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetZOffEn(swigCPtr);
    return ret;
  }

  public int SetRollEn(bool RollEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetRollEn__SWIG_0(swigCPtr, RollEnIn, bndchk);
    return ret;
  }

  public int SetRollEn(bool RollEnIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetRollEn__SWIG_1(swigCPtr, RollEnIn);
    return ret;
  }

  public bool GetRollEn() {
    bool ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetRollEn(swigCPtr);
    return ret;
  }

  public int SetPitchEn(bool PitchEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetPitchEn__SWIG_0(swigCPtr, PitchEnIn, bndchk);
    return ret;
  }

  public int SetPitchEn(bool PitchEnIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetPitchEn__SWIG_1(swigCPtr, PitchEnIn);
    return ret;
  }

  public bool GetPitchEn() {
    bool ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetPitchEn(swigCPtr);
    return ret;
  }

  public int SetYawEn(bool YawEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetYawEn__SWIG_0(swigCPtr, YawEnIn, bndchk);
    return ret;
  }

  public int SetYawEn(bool YawEnIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetYawEn__SWIG_1(swigCPtr, YawEnIn);
    return ret;
  }

  public bool GetYawEn() {
    bool ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetYawEn(swigCPtr);
    return ret;
  }

  public int SetXOff(float XOffIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetXOff__SWIG_0(swigCPtr, XOffIn, bndchk);
    return ret;
  }

  public int SetXOff(float XOffIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetXOff__SWIG_1(swigCPtr, XOffIn);
    return ret;
  }

  public float GetXOff() {
    float ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetXOff(swigCPtr);
    return ret;
  }

  public int SetYOff(float YOffIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetYOff__SWIG_0(swigCPtr, YOffIn, bndchk);
    return ret;
  }

  public int SetYOff(float YOffIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetYOff__SWIG_1(swigCPtr, YOffIn);
    return ret;
  }

  public float GetYOff() {
    float ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetYOff(swigCPtr);
    return ret;
  }

  public int SetZOff(float ZOffIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetZOff__SWIG_0(swigCPtr, ZOffIn, bndchk);
    return ret;
  }

  public int SetZOff(float ZOffIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetZOff__SWIG_1(swigCPtr, ZOffIn);
    return ret;
  }

  public float GetZOff() {
    float ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetZOff(swigCPtr);
    return ret;
  }

  public int SetRoll(float RollIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetRoll__SWIG_0(swigCPtr, RollIn, bndchk);
    return ret;
  }

  public int SetRoll(float RollIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetRoll__SWIG_1(swigCPtr, RollIn);
    return ret;
  }

  public float GetRoll() {
    float ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetRoll(swigCPtr);
    return ret;
  }

  public int SetPitch(float PitchIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetPitch__SWIG_0(swigCPtr, PitchIn, bndchk);
    return ret;
  }

  public int SetPitch(float PitchIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetPitch__SWIG_1(swigCPtr, PitchIn);
    return ret;
  }

  public float GetPitch() {
    float ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetPitch(swigCPtr);
    return ret;
  }

  public int SetYaw(float YawIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetYaw__SWIG_0(swigCPtr, YawIn, bndchk);
    return ret;
  }

  public int SetYaw(float YawIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_SetYaw__SWIG_1(swigCPtr, YawIn);
    return ret;
  }

  public float GetYaw() {
    float ret = ccl_dllDPINVOKE.CigiBaseArtPartCtrl_GetYaw(swigCPtr);
    return ret;
  }

}

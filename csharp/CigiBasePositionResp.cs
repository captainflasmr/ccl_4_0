//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiBasePositionResp : CigiBasePacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiBasePositionResp(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ccl_dllDPINVOKE.CigiBasePositionResp_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiBasePositionResp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiBasePositionResp obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccl_dllDPINVOKE.delete_CigiBasePositionResp(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override int Pack(CigiBasePacket Base, SWIGTYPE_p_unsigned___int8 Buff, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_Pack(swigCPtr, CigiBasePacket.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff), SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap, SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int GetCnvt(CigiVersionID CnvtVersion, SWIGTYPE_p_CigiCnvtInfoType__Type CnvtInfo) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_GetCnvt(swigCPtr, CigiVersionID.getCPtr(CnvtVersion), SWIGTYPE_p_CigiCnvtInfoType__Type.getCPtr(CnvtInfo));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetObjectID(SWIGTYPE_p_unsigned___int16 ObjectIDIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetObjectID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(ObjectIDIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetObjectID(SWIGTYPE_p_unsigned___int16 ObjectIDIn) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetObjectID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(ObjectIDIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int16 GetObjectID() {
    SWIGTYPE_p_unsigned___int16 ret = new SWIGTYPE_p_unsigned___int16(ccl_dllDPINVOKE.CigiBasePositionResp_GetObjectID(swigCPtr), true);
    return ret;
  }

  public int SetArtPartID(SWIGTYPE_p_unsigned___int8 ArtPartIDIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetArtPartID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(ArtPartIDIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetArtPartID(SWIGTYPE_p_unsigned___int8 ArtPartIDIn) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetArtPartID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(ArtPartIDIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetArtPartID() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiBasePositionResp_GetArtPartID(swigCPtr), true);
    return ret;
  }

  public int SetObjectClass(CigiBasePositionResp.ObjectClassGrp ObjectClassIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetObjectClass__SWIG_0(swigCPtr, (int)ObjectClassIn, bndchk);
    return ret;
  }

  public int SetObjectClass(CigiBasePositionResp.ObjectClassGrp ObjectClassIn) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetObjectClass__SWIG_1(swigCPtr, (int)ObjectClassIn);
    return ret;
  }

  public CigiBasePositionResp.ObjectClassGrp GetObjectClass() {
    CigiBasePositionResp.ObjectClassGrp ret = (CigiBasePositionResp.ObjectClassGrp)ccl_dllDPINVOKE.CigiBasePositionResp_GetObjectClass(swigCPtr);
    return ret;
  }

  public int SetCoordSys(CigiBasePositionResp.CoordSysGrp CoordSysIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetCoordSys__SWIG_0(swigCPtr, (int)CoordSysIn, bndchk);
    return ret;
  }

  public int SetCoordSys(CigiBasePositionResp.CoordSysGrp CoordSysIn) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetCoordSys__SWIG_1(swigCPtr, (int)CoordSysIn);
    return ret;
  }

  public CigiBasePositionResp.CoordSysGrp GetCoordSys() {
    CigiBasePositionResp.CoordSysGrp ret = (CigiBasePositionResp.CoordSysGrp)ccl_dllDPINVOKE.CigiBasePositionResp_GetCoordSys(swigCPtr);
    return ret;
  }

  public int SetLatOrXoff(double LatOrXoffIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetLatOrXoff__SWIG_0(swigCPtr, LatOrXoffIn, bndchk);
    return ret;
  }

  public int SetLatOrXoff(double LatOrXoffIn) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetLatOrXoff__SWIG_1(swigCPtr, LatOrXoffIn);
    return ret;
  }

  public double GetLatOrXoff() {
    double ret = ccl_dllDPINVOKE.CigiBasePositionResp_GetLatOrXoff(swigCPtr);
    return ret;
  }

  public int SetLonOrYoff(double LonOrYoffIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetLonOrYoff__SWIG_0(swigCPtr, LonOrYoffIn, bndchk);
    return ret;
  }

  public int SetLonOrYoff(double LonOrYoffIn) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetLonOrYoff__SWIG_1(swigCPtr, LonOrYoffIn);
    return ret;
  }

  public double GetLonOrYoff() {
    double ret = ccl_dllDPINVOKE.CigiBasePositionResp_GetLonOrYoff(swigCPtr);
    return ret;
  }

  public int SetAltOrZoff(double AltOrZoffIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetAltOrZoff__SWIG_0(swigCPtr, AltOrZoffIn, bndchk);
    return ret;
  }

  public int SetAltOrZoff(double AltOrZoffIn) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetAltOrZoff__SWIG_1(swigCPtr, AltOrZoffIn);
    return ret;
  }

  public double GetAltOrZoff() {
    double ret = ccl_dllDPINVOKE.CigiBasePositionResp_GetAltOrZoff(swigCPtr);
    return ret;
  }

  public int SetRoll(float RollIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetRoll__SWIG_0(swigCPtr, RollIn, bndchk);
    return ret;
  }

  public int SetRoll(float RollIn) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetRoll__SWIG_1(swigCPtr, RollIn);
    return ret;
  }

  public float GetRoll() {
    float ret = ccl_dllDPINVOKE.CigiBasePositionResp_GetRoll(swigCPtr);
    return ret;
  }

  public int SetPitch(float PitchIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetPitch__SWIG_0(swigCPtr, PitchIn, bndchk);
    return ret;
  }

  public int SetPitch(float PitchIn) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetPitch__SWIG_1(swigCPtr, PitchIn);
    return ret;
  }

  public float GetPitch() {
    float ret = ccl_dllDPINVOKE.CigiBasePositionResp_GetPitch(swigCPtr);
    return ret;
  }

  public int SetYaw(float YawIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetYaw__SWIG_0(swigCPtr, YawIn, bndchk);
    return ret;
  }

  public int SetYaw(float YawIn) {
    int ret = ccl_dllDPINVOKE.CigiBasePositionResp_SetYaw__SWIG_1(swigCPtr, YawIn);
    return ret;
  }

  public float GetYaw() {
    float ret = ccl_dllDPINVOKE.CigiBasePositionResp_GetYaw(swigCPtr);
    return ret;
  }

  public enum ObjectClassGrp {
    Entity = 0,
    ArtPart = 1,
    View = 2,
    ViewGrp = 3,
    MotionTracker = 4
  }

  public enum CoordSysGrp {
    Geodetic = 0,
    ParentEntity = 1,
    Submodel = 2
  }

}

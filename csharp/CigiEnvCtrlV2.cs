//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiEnvCtrlV2 : CigiBaseEnvCtrl {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiEnvCtrlV2(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ccl_dllDPINVOKE.CigiEnvCtrlV2_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiEnvCtrlV2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiEnvCtrlV2 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccl_dllDPINVOKE.delete_CigiEnvCtrlV2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CigiEnvCtrlV2() : this(ccl_dllDPINVOKE.new_CigiEnvCtrlV2(), true) {
  }

  public override int Pack(CigiBasePacket Base, SWIGTYPE_p_unsigned___int8 Buff, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_Pack(swigCPtr, CigiBasePacket.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff), SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap, SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override void FillHold(CigiBaseEnvCtrl Hold) {
    ccl_dllDPINVOKE.CigiEnvCtrlV2_FillHold(swigCPtr, CigiBaseEnvCtrl.getCPtr(Hold));
  }

  public int SetHour(SWIGTYPE_p_unsigned___int8 HourIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetHour__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(HourIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetHour(SWIGTYPE_p_unsigned___int8 HourIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetHour__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(HourIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetHour() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiEnvCtrlV2_GetHour(swigCPtr), true);
    return ret;
  }

  public int SetMinute(SWIGTYPE_p_unsigned___int8 MinuteIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetMinute__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(MinuteIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetMinute(SWIGTYPE_p_unsigned___int8 MinuteIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetMinute__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(MinuteIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetMinute() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiEnvCtrlV2_GetMinute(swigCPtr), true);
    return ret;
  }

  public int SetMonth(SWIGTYPE_p_unsigned___int8 MonthIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetMonth__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(MonthIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetMonth(SWIGTYPE_p_unsigned___int8 MonthIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetMonth__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(MonthIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetMonth() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiEnvCtrlV2_GetMonth(swigCPtr), true);
    return ret;
  }

  public int SetDay(SWIGTYPE_p_unsigned___int8 DayIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetDay__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(DayIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetDay(SWIGTYPE_p_unsigned___int8 DayIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetDay__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(DayIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetDay() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiEnvCtrlV2_GetDay(swigCPtr), true);
    return ret;
  }

  public int SetYear(SWIGTYPE_p_unsigned___int16 YearIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetYear__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(YearIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetYear(SWIGTYPE_p_unsigned___int16 YearIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetYear__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(YearIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int16 GetYear() {
    SWIGTYPE_p_unsigned___int16 ret = new SWIGTYPE_p_unsigned___int16(ccl_dllDPINVOKE.CigiEnvCtrlV2_GetYear(swigCPtr), true);
    return ret;
  }

  public int SetEphemerisEn(bool EphemerisEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetEphemerisEn__SWIG_0(swigCPtr, EphemerisEnIn, bndchk);
    return ret;
  }

  public int SetEphemerisEn(bool EphemerisEnIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetEphemerisEn__SWIG_1(swigCPtr, EphemerisEnIn);
    return ret;
  }

  public bool GetEphemerisEn() {
    bool ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_GetEphemerisEn(swigCPtr);
    return ret;
  }

  public int SetHumidity(SWIGTYPE_p_unsigned___int8 HumidityIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetHumidity__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(HumidityIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetHumidity(SWIGTYPE_p_unsigned___int8 HumidityIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetHumidity__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(HumidityIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetHumidity() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiEnvCtrlV2_GetHumidity(swigCPtr), true);
    return ret;
  }

  public int SetAtmosEn(bool AtmosEnIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetAtmosEn__SWIG_0(swigCPtr, AtmosEnIn, bndchk);
    return ret;
  }

  public int SetAtmosEn(bool AtmosEnIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetAtmosEn__SWIG_1(swigCPtr, AtmosEnIn);
    return ret;
  }

  public bool GetAtmosEn() {
    bool ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_GetAtmosEn(swigCPtr);
    return ret;
  }

  public int SetAerosol(float AerosolIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetAerosol__SWIG_0(swigCPtr, AerosolIn, bndchk);
    return ret;
  }

  public int SetAerosol(float AerosolIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetAerosol__SWIG_1(swigCPtr, AerosolIn);
    return ret;
  }

  public float GetAerosol() {
    float ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_GetAerosol(swigCPtr);
    return ret;
  }

  public int SetAirTemp(float AirTempIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetAirTemp__SWIG_0(swigCPtr, AirTempIn, bndchk);
    return ret;
  }

  public int SetAirTemp(float AirTempIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetAirTemp__SWIG_1(swigCPtr, AirTempIn);
    return ret;
  }

  public float GetAirTemp() {
    float ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_GetAirTemp(swigCPtr);
    return ret;
  }

  public int SetVisibility(float VisibilityIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetVisibility__SWIG_0(swigCPtr, VisibilityIn, bndchk);
    return ret;
  }

  public int SetVisibility(float VisibilityIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetVisibility__SWIG_1(swigCPtr, VisibilityIn);
    return ret;
  }

  public float GetVisibility() {
    float ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_GetVisibility(swigCPtr);
    return ret;
  }

  public int SetHorizWindSp(float HorizWindSpIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetHorizWindSp__SWIG_0(swigCPtr, HorizWindSpIn, bndchk);
    return ret;
  }

  public int SetHorizWindSp(float HorizWindSpIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetHorizWindSp__SWIG_1(swigCPtr, HorizWindSpIn);
    return ret;
  }

  public float GetHorizWindSp() {
    float ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_GetHorizWindSp(swigCPtr);
    return ret;
  }

  public int SetWindDir(float WindDirIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetWindDir__SWIG_0(swigCPtr, WindDirIn, bndchk);
    return ret;
  }

  public int SetWindDir(float WindDirIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetWindDir__SWIG_1(swigCPtr, WindDirIn);
    return ret;
  }

  public float GetWindDir() {
    float ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_GetWindDir(swigCPtr);
    return ret;
  }

  public int SetBaroPress(float BaroPressIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetBaroPress__SWIG_0(swigCPtr, BaroPressIn, bndchk);
    return ret;
  }

  public int SetBaroPress(float BaroPressIn) {
    int ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_SetBaroPress__SWIG_1(swigCPtr, BaroPressIn);
    return ret;
  }

  public float GetBaroPress() {
    float ret = ccl_dllDPINVOKE.CigiEnvCtrlV2_GetBaroPress(swigCPtr);
    return ret;
  }

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiBaseSymbolCtrl : CigiBasePacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiBaseSymbolCtrl(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiBaseSymbolCtrl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiBaseSymbolCtrl obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccl_dllDPINVOKE.delete_CigiBaseSymbolCtrl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override int Pack(CigiBasePacket Base, SWIGTYPE_p_unsigned___int8 Buff, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_Pack(swigCPtr, CigiBasePacket.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff), SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap, SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int GetCnvt(CigiVersionID CnvtVersion, SWIGTYPE_p_CigiCnvtInfoType__Type CnvtInfo) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetCnvt(swigCPtr, CigiVersionID.getCPtr(CnvtVersion), SWIGTYPE_p_CigiCnvtInfoType__Type.getCPtr(CnvtInfo));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetSymbolID(SWIGTYPE_p_unsigned___int16 SymbolIDIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetSymbolID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(SymbolIDIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetSymbolID(SWIGTYPE_p_unsigned___int16 SymbolIDIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetSymbolID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(SymbolIDIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int16 GetSymbolID() {
    SWIGTYPE_p_unsigned___int16 ret = new SWIGTYPE_p_unsigned___int16(ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetSymbolID(swigCPtr), true);
    return ret;
  }

  public int SetSymbolState(CigiBaseSymbolCtrl.SymbolStateGrp SymbolStateIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetSymbolState__SWIG_0(swigCPtr, (int)SymbolStateIn, bndchk);
    return ret;
  }

  public int SetSymbolState(CigiBaseSymbolCtrl.SymbolStateGrp SymbolStateIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetSymbolState__SWIG_1(swigCPtr, (int)SymbolStateIn);
    return ret;
  }

  public CigiBaseSymbolCtrl.SymbolStateGrp GetSymbolState() {
    CigiBaseSymbolCtrl.SymbolStateGrp ret = (CigiBaseSymbolCtrl.SymbolStateGrp)ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetSymbolState(swigCPtr);
    return ret;
  }

  public int SetAttachState(CigiBaseSymbolCtrl.AttachStateGrp AttachStateIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetAttachState__SWIG_0(swigCPtr, (int)AttachStateIn, bndchk);
    return ret;
  }

  public int SetAttachState(CigiBaseSymbolCtrl.AttachStateGrp AttachStateIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetAttachState__SWIG_1(swigCPtr, (int)AttachStateIn);
    return ret;
  }

  public CigiBaseSymbolCtrl.AttachStateGrp GetAttachState() {
    CigiBaseSymbolCtrl.AttachStateGrp ret = (CigiBaseSymbolCtrl.AttachStateGrp)ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetAttachState(swigCPtr);
    return ret;
  }

  public int SetFlashCtrl(CigiBaseSymbolCtrl.FlashCtrlGrp FlashCtrlIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetFlashCtrl__SWIG_0(swigCPtr, (int)FlashCtrlIn, bndchk);
    return ret;
  }

  public int SetFlashCtrl(CigiBaseSymbolCtrl.FlashCtrlGrp FlashCtrlIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetFlashCtrl__SWIG_1(swigCPtr, (int)FlashCtrlIn);
    return ret;
  }

  public CigiBaseSymbolCtrl.FlashCtrlGrp GetFlashCtrl() {
    CigiBaseSymbolCtrl.FlashCtrlGrp ret = (CigiBaseSymbolCtrl.FlashCtrlGrp)ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetFlashCtrl(swigCPtr);
    return ret;
  }

  public int SetInheritColor(CigiBaseSymbolCtrl.InheritColorGrp InheritColorIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetInheritColor__SWIG_0(swigCPtr, (int)InheritColorIn, bndchk);
    return ret;
  }

  public int SetInheritColor(CigiBaseSymbolCtrl.InheritColorGrp InheritColorIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetInheritColor__SWIG_1(swigCPtr, (int)InheritColorIn);
    return ret;
  }

  public CigiBaseSymbolCtrl.InheritColorGrp GetInheritColor() {
    CigiBaseSymbolCtrl.InheritColorGrp ret = (CigiBaseSymbolCtrl.InheritColorGrp)ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetInheritColor(swigCPtr);
    return ret;
  }

  public int SetParentSymbolID(SWIGTYPE_p_unsigned___int16 ParentSymbolIDIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetParentSymbolID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(ParentSymbolIDIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetParentSymbolID(SWIGTYPE_p_unsigned___int16 ParentSymbolIDIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetParentSymbolID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(ParentSymbolIDIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int16 GetParentSymbolID() {
    SWIGTYPE_p_unsigned___int16 ret = new SWIGTYPE_p_unsigned___int16(ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetParentSymbolID(swigCPtr), true);
    return ret;
  }

  public int SetSurfaceID(SWIGTYPE_p_unsigned___int16 SurfaceIDIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetSurfaceID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(SurfaceIDIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetSurfaceID(SWIGTYPE_p_unsigned___int16 SurfaceIDIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetSurfaceID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(SurfaceIDIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int16 GetSurfaceID() {
    SWIGTYPE_p_unsigned___int16 ret = new SWIGTYPE_p_unsigned___int16(ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetSurfaceID(swigCPtr), true);
    return ret;
  }

  public int SetLayer(SWIGTYPE_p_unsigned___int8 LayerIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetLayer__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(LayerIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetLayer(SWIGTYPE_p_unsigned___int8 LayerIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetLayer__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(LayerIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetLayer() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetLayer(swigCPtr), true);
    return ret;
  }

  public int SetFlashDutyCycle(SWIGTYPE_p_unsigned___int8 FlashDutyCycleIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetFlashDutyCycle__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(FlashDutyCycleIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetFlashDutyCycle(SWIGTYPE_p_unsigned___int8 FlashDutyCycleIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetFlashDutyCycle__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(FlashDutyCycleIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetFlashDutyCycle() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetFlashDutyCycle(swigCPtr), true);
    return ret;
  }

  public int SetFlashPeriod(float FlashPeriodIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetFlashPeriod__SWIG_0(swigCPtr, FlashPeriodIn, bndchk);
    return ret;
  }

  public int SetFlashPeriod(float FlashPeriodIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetFlashPeriod__SWIG_1(swigCPtr, FlashPeriodIn);
    return ret;
  }

  public float GetFlashPeriod() {
    float ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetFlashPeriod(swigCPtr);
    return ret;
  }

  public int SetUPosition(float UPositionIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetUPosition__SWIG_0(swigCPtr, UPositionIn, bndchk);
    return ret;
  }

  public int SetUPosition(float UPositionIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetUPosition__SWIG_1(swigCPtr, UPositionIn);
    return ret;
  }

  public float GetUPosition() {
    float ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetUPosition(swigCPtr);
    return ret;
  }

  public int SetVPosition(float VPositionIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetVPosition__SWIG_0(swigCPtr, VPositionIn, bndchk);
    return ret;
  }

  public int SetVPosition(float VPositionIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetVPosition__SWIG_1(swigCPtr, VPositionIn);
    return ret;
  }

  public float GetVPosition() {
    float ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetVPosition(swigCPtr);
    return ret;
  }

  public int SetRotation(float RotationIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetRotation__SWIG_0(swigCPtr, RotationIn, bndchk);
    return ret;
  }

  public int SetRotation(float RotationIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetRotation__SWIG_1(swigCPtr, RotationIn);
    return ret;
  }

  public float GetRotation() {
    float ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetRotation(swigCPtr);
    return ret;
  }

  public int SetColor(SWIGTYPE_p_unsigned___int8 RedIn, SWIGTYPE_p_unsigned___int8 GreenIn, SWIGTYPE_p_unsigned___int8 BlueIn, SWIGTYPE_p_unsigned___int8 AlphaIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetColor__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(RedIn), SWIGTYPE_p_unsigned___int8.getCPtr(GreenIn), SWIGTYPE_p_unsigned___int8.getCPtr(BlueIn), SWIGTYPE_p_unsigned___int8.getCPtr(AlphaIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetColor(SWIGTYPE_p_unsigned___int8 RedIn, SWIGTYPE_p_unsigned___int8 GreenIn, SWIGTYPE_p_unsigned___int8 BlueIn, SWIGTYPE_p_unsigned___int8 AlphaIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetColor__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(RedIn), SWIGTYPE_p_unsigned___int8.getCPtr(GreenIn), SWIGTYPE_p_unsigned___int8.getCPtr(BlueIn), SWIGTYPE_p_unsigned___int8.getCPtr(AlphaIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetColorDatum(SWIGTYPE_p_unsigned___int8 RedValue, SWIGTYPE_p_unsigned___int8 GreenValue, SWIGTYPE_p_unsigned___int8 BlueValue, SWIGTYPE_p_unsigned___int8 AlphaValue, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetColorDatum__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(RedValue), SWIGTYPE_p_unsigned___int8.getCPtr(GreenValue), SWIGTYPE_p_unsigned___int8.getCPtr(BlueValue), SWIGTYPE_p_unsigned___int8.getCPtr(AlphaValue), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetColorDatum(SWIGTYPE_p_unsigned___int8 RedValue, SWIGTYPE_p_unsigned___int8 GreenValue, SWIGTYPE_p_unsigned___int8 BlueValue, SWIGTYPE_p_unsigned___int8 AlphaValue) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetColorDatum__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(RedValue), SWIGTYPE_p_unsigned___int8.getCPtr(GreenValue), SWIGTYPE_p_unsigned___int8.getCPtr(BlueValue), SWIGTYPE_p_unsigned___int8.getCPtr(AlphaValue));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetRed(SWIGTYPE_p_unsigned___int8 RedIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetRed__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(RedIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetRed(SWIGTYPE_p_unsigned___int8 RedIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetRed__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(RedIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetRed() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetRed(swigCPtr), true);
    return ret;
  }

  public int SetGreen(SWIGTYPE_p_unsigned___int8 GreenIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetGreen__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(GreenIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetGreen(SWIGTYPE_p_unsigned___int8 GreenIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetGreen__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(GreenIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetGreen() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetGreen(swigCPtr), true);
    return ret;
  }

  public int SetBlue(SWIGTYPE_p_unsigned___int8 BlueIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetBlue__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(BlueIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetBlue(SWIGTYPE_p_unsigned___int8 BlueIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetBlue__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(BlueIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetBlue() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetBlue(swigCPtr), true);
    return ret;
  }

  public int SetAlpha(SWIGTYPE_p_unsigned___int8 AlphaIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetAlpha__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(AlphaIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetAlpha(SWIGTYPE_p_unsigned___int8 AlphaIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetAlpha__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(AlphaIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetAlpha() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetAlpha(swigCPtr), true);
    return ret;
  }

  public int SetScaleU(float ScaleUIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetScaleU__SWIG_0(swigCPtr, ScaleUIn, bndchk);
    return ret;
  }

  public int SetScaleU(float ScaleUIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetScaleU__SWIG_1(swigCPtr, ScaleUIn);
    return ret;
  }

  public float GetScaleU() {
    float ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetScaleU(swigCPtr);
    return ret;
  }

  public int SetScaleV(float ScaleVIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetScaleV__SWIG_0(swigCPtr, ScaleVIn, bndchk);
    return ret;
  }

  public int SetScaleV(float ScaleVIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_SetScaleV__SWIG_1(swigCPtr, ScaleVIn);
    return ret;
  }

  public float GetScaleV() {
    float ret = ccl_dllDPINVOKE.CigiBaseSymbolCtrl_GetScaleV(swigCPtr);
    return ret;
  }

  public enum SymbolStateGrp {
    Hidden = 0,
    Visible = 1,
    Destroyed = 2
  }

  public enum AttachStateGrp {
    Detach = 0,
    Attach = 1
  }

  public enum FlashCtrlGrp {
    Continue = 0,
    Reset = 1
  }

  public enum InheritColorGrp {
    NotInherit = 0,
    Inherit = 1
  }

}

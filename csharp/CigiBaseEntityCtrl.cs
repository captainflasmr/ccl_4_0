//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiBaseEntityCtrl : CigiBasePacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiBaseEntityCtrl(global::System.IntPtr cPtr, bool cMemoryOwn) : base(example_modulePINVOKE.CigiBaseEntityCtrl_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiBaseEntityCtrl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiBaseEntityCtrl obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          example_modulePINVOKE.delete_CigiBaseEntityCtrl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override int Pack(CigiBasePacket Base, SWIGTYPE_p_unsigned___int8 Buff, SWIGTYPE_p_void Spec) {
    int ret = example_modulePINVOKE.CigiBaseEntityCtrl_Pack(swigCPtr, CigiBasePacket.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff), SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap, SWIGTYPE_p_void Spec) {
    int ret = example_modulePINVOKE.CigiBaseEntityCtrl_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap, SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int GetCnvt(CigiVersionID CnvtVersion, SWIGTYPE_p_CigiCnvtInfoType__Type CnvtInfo) {
    int ret = example_modulePINVOKE.CigiBaseEntityCtrl_GetCnvt(swigCPtr, CigiVersionID.getCPtr(CnvtVersion), SWIGTYPE_p_CigiCnvtInfoType__Type.getCPtr(CnvtInfo));
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEntityID(SWIGTYPE_p_unsigned___int16 EntityIDIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseEntityCtrl_SetEntityID__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(EntityIDIn), bndchk);
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEntityID(SWIGTYPE_p_unsigned___int16 EntityIDIn) {
    int ret = example_modulePINVOKE.CigiBaseEntityCtrl_SetEntityID__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(EntityIDIn));
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int16 GetEntityID() {
    SWIGTYPE_p_unsigned___int16 ret = new SWIGTYPE_p_unsigned___int16(example_modulePINVOKE.CigiBaseEntityCtrl_GetEntityID(swigCPtr), true);
    return ret;
  }

  public int SetEntityType(SWIGTYPE_p_unsigned___int16 EntityTypeIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseEntityCtrl_SetEntityType__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(EntityTypeIn), bndchk);
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetEntityType(SWIGTYPE_p_unsigned___int16 EntityTypeIn) {
    int ret = example_modulePINVOKE.CigiBaseEntityCtrl_SetEntityType__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int16.getCPtr(EntityTypeIn));
    if (example_modulePINVOKE.SWIGPendingException.Pending) throw example_modulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int16 GetEntityType() {
    SWIGTYPE_p_unsigned___int16 ret = new SWIGTYPE_p_unsigned___int16(example_modulePINVOKE.CigiBaseEntityCtrl_GetEntityType(swigCPtr), true);
    return ret;
  }

  public int SetCollisionDetectEn(CigiBaseEntityCtrl.CollisionDetectGrp CollisionDetectEnIn, bool bndchk) {
    int ret = example_modulePINVOKE.CigiBaseEntityCtrl_SetCollisionDetectEn__SWIG_0(swigCPtr, (int)CollisionDetectEnIn, bndchk);
    return ret;
  }

  public int SetCollisionDetectEn(CigiBaseEntityCtrl.CollisionDetectGrp CollisionDetectEnIn) {
    int ret = example_modulePINVOKE.CigiBaseEntityCtrl_SetCollisionDetectEn__SWIG_1(swigCPtr, (int)CollisionDetectEnIn);
    return ret;
  }

  public CigiBaseEntityCtrl.CollisionDetectGrp GetCollisionDetectEn() {
    CigiBaseEntityCtrl.CollisionDetectGrp ret = (CigiBaseEntityCtrl.CollisionDetectGrp)example_modulePINVOKE.CigiBaseEntityCtrl_GetCollisionDetectEn(swigCPtr);
    return ret;
  }

  public enum EntityStateGrp {
    Standby = 0,
    Active = 1,
    Remove = 2,
    Destroyed = 2
  }

  public enum AttachStateGrp {
    Detach = 0,
    Attach = 1
  }

  public enum CollisionDetectGrp {
    Disable = 0,
    Enable = 1
  }

  public enum InheritAlphaGrp {
    NoInherit = 0,
    Inherit = 1
  }

  public enum GrndClampGrp {
    NoClamp = 0,
    AltClamp = 1,
    AltAttClamp = 2
  }

  public enum AnimationDirGrp {
    Forward = 0,
    Backward = 1
  }

  public enum AnimationLoopModeGrp {
    OneShot = 0,
    Continuous = 1
  }

  public enum AnimationStateGrp {
    Stop = 0,
    Pause = 1,
    Play = 2,
    Continue = 3,
    NoAction = 4,
    Load = 5,
    LoadActivate = 6,
    Activate = 7,
    Deactivate = 8,
    DeactivateUnload = 9
  }

  public enum ExtendedEntityTypeGrp {
    Short = 0,
    Extended = 1
  }

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CigiBaseSOF : CigiBasePacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CigiBaseSOF(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ccl_dllDPINVOKE.CigiBaseSOF_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CigiBaseSOF obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CigiBaseSOF obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccl_dllDPINVOKE.delete_CigiBaseSOF(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override int Pack(CigiBasePacket Base, SWIGTYPE_p_unsigned___int8 Buff, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_Pack(swigCPtr, CigiBasePacket.getCPtr(Base), SWIGTYPE_p_unsigned___int8.getCPtr(Buff), SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int Unpack(SWIGTYPE_p_unsigned___int8 Buff, bool Swap, SWIGTYPE_p_void Spec) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_Unpack(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(Buff), Swap, SWIGTYPE_p_void.getCPtr(Spec));
    return ret;
  }

  public override int GetCnvt(CigiVersionID CnvtVersion, SWIGTYPE_p_CigiCnvtInfoType__Type CnvtInfo) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_GetCnvt(swigCPtr, CigiVersionID.getCPtr(CnvtVersion), SWIGTYPE_p_CigiCnvtInfoType__Type.getCPtr(CnvtInfo));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetSwap() {
    bool ret = ccl_dllDPINVOKE.CigiBaseSOF_GetSwap(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p___int8 GetDatabaseID() {
    SWIGTYPE_p___int8 ret = new SWIGTYPE_p___int8(ccl_dllDPINVOKE.CigiBaseSOF_GetDatabaseID(swigCPtr), true);
    return ret;
  }

  public int SetDatabaseID(SWIGTYPE_p___int8 DataBaseIDIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_SetDatabaseID__SWIG_0(swigCPtr, SWIGTYPE_p___int8.getCPtr(DataBaseIDIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetDatabaseID(SWIGTYPE_p___int8 DataBaseIDIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_SetDatabaseID__SWIG_1(swigCPtr, SWIGTYPE_p___int8.getCPtr(DataBaseIDIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned___int32 GetFrameCntr() {
    SWIGTYPE_p_unsigned___int32 ret = new SWIGTYPE_p_unsigned___int32(ccl_dllDPINVOKE.CigiBaseSOF_GetFrameCntr(swigCPtr), true);
    return ret;
  }

  public int SetFrameCntr(SWIGTYPE_p_unsigned___int32 FrameCntrIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_SetFrameCntr__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int32.getCPtr(FrameCntrIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetFrameCntr(SWIGTYPE_p_unsigned___int32 FrameCntrIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_SetFrameCntr__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int32.getCPtr(FrameCntrIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CigiBaseSOF.IGModeGrp GetIGMode() {
    CigiBaseSOF.IGModeGrp ret = (CigiBaseSOF.IGModeGrp)ccl_dllDPINVOKE.CigiBaseSOF_GetIGMode(swigCPtr);
    return ret;
  }

  public int SetIGMode(CigiBaseSOF.IGModeGrp IGModeIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_SetIGMode__SWIG_0(swigCPtr, (int)IGModeIn, bndchk);
    return ret;
  }

  public int SetIGMode(CigiBaseSOF.IGModeGrp IGModeIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_SetIGMode__SWIG_1(swigCPtr, (int)IGModeIn);
    return ret;
  }

  public SWIGTYPE_p_unsigned___int8 GetIGStatus() {
    SWIGTYPE_p_unsigned___int8 ret = new SWIGTYPE_p_unsigned___int8(ccl_dllDPINVOKE.CigiBaseSOF_GetIGStatus(swigCPtr), true);
    return ret;
  }

  public int SetIGStatus(SWIGTYPE_p_unsigned___int8 IGStatusIn, bool bndchk) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_SetIGStatus__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(IGStatusIn), bndchk);
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetIGStatus(SWIGTYPE_p_unsigned___int8 IGStatusIn) {
    int ret = ccl_dllDPINVOKE.CigiBaseSOF_SetIGStatus__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned___int8.getCPtr(IGStatusIn));
    if (ccl_dllDPINVOKE.SWIGPendingException.Pending) throw ccl_dllDPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum IGModeGrp {
    Reset = 0,
    Standby = 0,
    Operate = 1,
    debug = 2,
    OfflineMaint = 3
  }

  public enum EarthRefModelGrp {
    WGS84 = 0,
    HostDefined = 1
  }

}
